# File: .github/workflows/deploy.yml
name: üöÄ Build & Deploy All Clients

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  pages:
    runs-on: ubuntu-latest
    steps:
      # 1) Checkout code
      - uses: actions/checkout@v4

      # 2) Setup Node.js
      - uses: actions/setup-node@v4
        with:
          node-version: 18

      # 3) Pre-normalize for GH Pages subfolders
      #    - Fix index.html paths
      #    - Ensure vite.config.* has base: '/<slug>/'
      - name: Pre-normalize projects
        shell: bash
        run: |
          set -e
          for dir in project/*/; do
            slug=$(basename "$dir")
            [ "$slug" = "landingpage" ] && continue
            echo "üßπ Normalizing: $slug"

            # A) Make index.html use relative paths
            if [ -f "$dir/index.html" ]; then
              sed -i 's|href="/vite.svg"|href="./vite.svg"|g' "$dir/index.html" || true
              sed -i 's|src="/src/main|src="./src/main|g' "$dir/index.html" || true
            fi

            # B) Ensure vite config has base '/<slug>/'
            cfg="$dir/vite.config.ts"
            [ -f "$dir/vite.config.js" ] && cfg="$dir/vite.config.js"
            if [ ! -f "$cfg" ] || ! grep -q "base: '/$slug/'" "$cfg"; then
              echo "‚úçÔ∏è  Writing vite.config.ts with base '/$slug/'"
              printf "%s\n" \
                "import { defineConfig } from 'vite';" \
                "import react from '@vitejs/plugin-react';" \
                "" \
                "export default defineConfig({" \
                "  plugins: [react()], " \
                "  base: '/$slug/'," \
                "  optimizeDeps: { exclude: ['lucide-react'] }," \
                "});" > "$dir/vite.config.ts"
            fi
          done

      # 4) Normalize routing ‚Üí force HashRouter and strip BrowserRouter
      - name: Normalize routing to HashRouter
        shell: bash
        run: |
          set -e
          perl_wrap_app='s/<App\\s*\\/>/<HashRouter><App \\/><\\/HashRouter>/g'
          rm_browser_tags='s/<BrowserRouter[^>]*>//g; s<\\/BrowserRouter>||g'
          for dir in project/*/; do
            slug=$(basename "$dir")
            [ "$slug" = "landingpage" ] && continue

            # Find main.* (tsx/jsx/ts/js)
            main=""
            for f in "$dir"/src/main.tsx "$dir"/src/main.jsx "$dir"/src/main.ts "$dir"/src/main.js; do
              [ -f "$f" ] && { main="$f"; break; }
            done
            if [ -n "$main" ]; then
              # Ensure import (add or extend)
              if grep -q "from 'react-router-dom'" "$main"; then
                perl -0777 -i -pe "s/import\\s*\\{([^}]*)\\}\\s*from\\s*'react-router-dom';/do { my \$s=\$1; \$s=~s/\\bHashRouter\\b//g; \$s=~s/^\\s*,\\s*|\\s*,\\s*\$//g; 'import { '.(\$s =~ /\\S/ ? \$s.', ' : '').'HashRouter } from '\\''react-router-dom'\\'';'} /e" "$main"
              else
                # add a new import at top
                sed -i "1s;^;import { HashRouter } from 'react-router-dom';\\n;" "$main"
              fi
              # Wrap <App />
              perl -0777 -i -pe "$perl_wrap_app" "$main"
            fi

            # Find App.* and strip BrowserRouter + clean imports
            app=""
            for f in "$dir"/src/App.tsx "$dir"/src/App.jsx "$dir"/src/App.ts "$dir"/src/App.js; do
              [ -f "$f" ] && { app="$f"; break; }
            done
            if [ -n "$app" ]; then
              perl -0777 -i -pe "$rm_browser_tags" "$app"
              perl -0777 -i -pe "s/import\\s*\\{([^}]*)\\}\\s*from\\s*'react-router-dom';/do { my \$s=\$1; \$s=~s/\\bBrowserRouter\\b\\s*,?\\s*//g; \$s=~s/,\\s*,/,/g; \$s=~s/^\\s*,\\s*//; \$s=~s/,\\s*\$//; if(\$s =~ /\\S/){'import { '.\$s.' } from '\\''react-router-dom'\\'';'} else { '' } }/eg" "$app"
            fi
          done

      # 5) Build each client demo (skip landingpage)
      - name: Build demos
        shell: bash
        run: |
          set -e
          for dir in project/*/; do
            slug=$(basename "$dir")
            [ "$slug" = "landingpage" ] && continue

            echo "üî® Considering demo: $slug"
            if [ ! -f "$dir/package.json" ]; then
              echo "‚û°Ô∏è  Skipping $slug (no package.json)"
              continue
            fi

            echo "üîß Installing deps for: $slug"
            cd "$dir"
            if [ -f package-lock.json ]; then
              npm ci
            else
              npm install --no-audit --no-fund
            fi

            echo "üèó  Building: $slug"
            if npm run -s build; then
              echo "‚úÖ Built with npm run build"
            else
              echo "‚ÑπÔ∏è  Falling back to npx vite build for $slug"
              npx vite build
            fi

            cd ../../

            if [ -d "project/$slug/dist" ]; then
              rm -rf "$slug"
              mkdir -p "$slug"
              cp -r "project/$slug/dist/." "$slug/"
            else
              echo "‚ö†Ô∏è  $slug built but no dist/ found ‚Äî skipping copy"
            fi
          done

      # 6) Build & copy landing page into root
      - name: Build landing page
        shell: bash
        run: |
          cd project/landingpage
          npm ci
          npm run build
          cd ../../
          cp -r project/landingpage/dist/* .

      # 7) Dynamic SPA fallback for ALL paths (no template strings)
      - name: Create smart 404.html
        shell: bash
        run: |
          echo '<!DOCTYPE html><html><head><meta charset="utf-8"><title>Redirecting</title></head><body><script>var p=location.pathname.split("/").filter(Boolean);if(p.length>0){var s=p[0];var r=p.slice(1).join("/");var h=r?"#/"+r:"";window.location.replace("/"+s+"/index.html"+h);}else{window.location.replace("/index.html");}</script><p>Redirecting...</p></body></html>' > 404.html

      # 8) Debug: list everything that will be published
      - name: Show publish directory
        shell: bash
        run: |
          echo "=== publish contents ==="
          ls -R .
          echo "========================"

      # 9) Deploy to GitHub Pages (gh-pages branch)
      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_branch: gh-pages
          publish_dir: ./
