name: ðŸš€ Build & Deploy All Clients

on:
  # Run after the auto-prepare workflow completes (so we deploy the patched commit)
  workflow_run:
    workflows: ["ðŸ›  Auto-prepare project subfolders (GH Pages)"]
    types: [completed]

  # Allow manual runs anytime
  workflow_dispatch:

  # Also deploy on pushes that DON'T touch project/**
  # (root changes like 404.html, README, or workflow edits)
  push:
    branches: [ main ]
    paths-ignore:
      - 'project/**'

concurrency:
  group: deploy-${{ github.ref }}
  cancel-in-progress: true

jobs:
  pages:
    # Skip if the auto-prepare workflow failed; also ignore bot loops on direct pushes
    if: (github.event_name != 'workflow_run' || github.event.workflow_run.conclusion == 'success') && github.actor != 'github-actions[bot]'
    runs-on: ubuntu-latest

    steps:
      # 1) Checkout code
      - uses: actions/checkout@v4

      # 2) Setup Node.js
      - uses: actions/setup-node@v4
        with:
          node-version: 18

      # 3) Build each client demo (skip landingpage)
      - name: Build demos
        run: |
          for dir in project/*/; do
            slug=$(basename "$dir")
            if [ "$slug" = "landingpage" ]; then
              continue
            fi
            echo "ðŸ”¨ Building demo: $slug"
            cd "$dir"
            npm ci
            npm run build
            cd ../../

            # Copy dist into its own folder
            rm -rf "$slug"
            mkdir -p "$slug"
            cp -r "project/$slug/dist/." "$slug/"
          done

      # 4) Build & copy landing page into root
      - name: Build landing page
        run: |
          cd project/landingpage
          npm ci
          npm run build
          cd ../../
          cp -r project/landingpage/dist/* .

      # 5) Dynamic SPA fallback for ALL paths
      - name: Create smart 404.html
        run: |
          cat > 404.html << 'EOF'
          <!DOCTYPE html>
          <html>
          <head><meta charset="utf-8"><title>Redirectingâ€¦</title></head>
          <body>
            <script>
              // Split path segments
              const parts = location.pathname.split('/').filter(Boolean)
              if (parts.length > 0) {
                // first segment is the demo slug
                const slug = parts[0]
                // rest after slug
                const rest = parts.slice(1).join('/')
                // build target URL: /<slug>/index.html#/<rest>
                const hash = rest ? '#/' + rest : ''
                window.location.replace(`/${slug}/index.html${hash}`)
              } else {
                // no slug â†’ root landing page
                window.location.replace('/index.html')
              }
            </script>
            <p>Redirectingâ€¦</p>
          </body>
          </html>
          EOF

      # 6) Debug: list everything that will be published
      - name: Show publish directory
        run: |
          echo "=== publish contents ==="
          ls -R .
          echo "========================"

      # 7) Deploy to GitHub Pages (gh-pages branch)
      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_branch: gh-pages
          publish_dir: ./
